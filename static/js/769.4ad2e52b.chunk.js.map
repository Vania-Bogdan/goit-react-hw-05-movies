{"version":3,"file":"static/js/769.4ad2e52b.chunk.js","mappings":"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","sources":["components/api/movies.js","components/pages/SingleFilmPage/SingleFilmPage.jsx"],"sourcesContent":["import axios from \"axios\";\n\nconst KEY = '626606dbe7f5835682a8b704b6445e35';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport const getMovies = async () => {\n    const URL = `${BASE_URL}/trending/movie/day?api_key=${KEY}&language=en-US&include_adult=false`;\n    const { data } = await axios.get(URL);\n    return data;\n}\n\nexport const getMovieDetails = async (id) => {\n    const URL = `${BASE_URL}/movie/${id}?api_key=${KEY}&language=en-US&include_adult=false`;\n    const { data } = await axios.get(URL);\n    return data;\n}\n\nexport const getMovieCast = async (id) => {\n    const URL = `${BASE_URL}/movie/${id}/credits?api_key=${KEY}&language=en-US&include_adult=false`;\n    const { data } = await axios.get(URL);\n    return data;\n}\n\nexport const getMovieReviews = async (id) => {\n    const URL = `${BASE_URL}/movie/${id}/reviews?api_key=${KEY}&language=en-US&page=1`;\n    const { data } = await axios.get(URL);\n    return data;\n}\n\nexport const searchMovie = async (search) => {\n    const URL = `${BASE_URL}/search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${search}`;\n    const { data } = await axios.get(URL);\n    return data;\n}","import { useState, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { getMovieDetails } from \"components/api/movies\";\nimport { Link, Outlet, useNavigate, useLocation } from \"react-router-dom\";\n\nconst SingleFilmPage = () => {\n    const [state, setState] = useState({\n        item: {},\n        loading: false,\n        error: null\n    })\n    \n    const {id} = useParams()\n\n    useEffect(() => {\n        const fetchMovies = async () => {\n            try {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: true,\n                    error: null,\n                }));\n                const data = await getMovieDetails(id);\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        item: data\n                    }\n                })\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error,\n                }));\n            }\n            finally {\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        loading: false\n                    }\n                })\n            }\n        }\n        fetchMovies()\n    }, [setState, id])\n\n    const nav = useNavigate()\n\n    const location = useLocation();\n    const from = location.state?.from || \"/\"\n\n    const goBack = () => {nav(from)}\n\n    const { title, poster_path, vote_average, overview, \n        genres } = state.item\n\n    const userScore = Math.round(vote_average * 10)\n    return (\n        <div className=\"container\">\n            <button className=\"go-back-btn\" onClick={goBack}>ðŸ”™</button>\n            <div className=\"main-info\">\n                <img src={poster_path ? `https://image.tmdb.org/t/p/w342${poster_path}` : `https://i.imgur.com/Z2MYNbj.png/large_movie_poster.png`} alt=\"Movie poster\" className=\"film-poster\"/>\n                <div className=\"text-info\">\n                    <h2 className=\"film-title\">{title}</h2>\n                    <p className=\"film-score\">User score: <span className=\"score-pers\">{userScore}%</span></p>\n                    <h3 className=\"film-overview\">Overview</h3>\n                    <p className=\"film-about\">{overview}</p>\n                    <h4 className=\"film-genres\">Genres</h4>\n                    <ul className=\"film-genres-list\">\n                        {genres ? genres.map(({ id, name }) => <li key={id} className=\"film-one-genre\">{name}</li>) : <p className=\"film-one-genre\">no genres</p>}\n                    </ul>\n                </div>\n            </div>\n            <div className=\"secondary-info\"> \n                <Link state={{ from }} to={`/movies/${id}/cast`} className=\"film-btn\">Cast</Link>\n                <Link state={{ from }} to={`/movies/${id}/reviews`} className=\"film-btn\">Reviews</Link>\n                <Outlet />\n            </div>\n        </div>\n    )\n}\n\nexport default SingleFilmPage"],"names":["KEY","BASE_URL","getMovies","URL","axios","data","getMovieDetails","id","getMovieCast","getMovieReviews","searchMovie","search","useState","item","loading","error","state","setState","useParams","useEffect","fetchMovies","prevState","nav","useNavigate","from","useLocation","title","poster_path","vote_average","overview","genres","userScore","Math","round","className","onClick","src","alt","map","name","to"],"sourceRoot":""}